# PaperSorter Example Configuration File
# Copy this file to your preferred location and update with your credentials
# Default location: ./config.yml

# Admin users configuration
# Users listed here will automatically be promoted to admin upon login
# Note: This list only promotes users, it never demotes existing admins
# To remove admin privileges, use the web interface or database updates
admin_users:
  # Example email addresses for Google/GitHub OAuth
  # - "admin@example.com"
  # - "researcher@university.edu"
  # Example ORCID identifiers (must include @orcid.org suffix)
  # - "0000-0002-1825-0097@orcid.org"
  # - "0000-0003-4567-8901@orcid.org"

# Database configuration
db:
  type: postgres
  host: localhost
  port: 5432
  user: papersorter
  database: papersorter
  password: "your_database_password_here"

# Web interface configuration
web:
  # Site name displayed in page titles and headers (defaults to "PaperSorter" if not set)
  site_name: "PaperSorter"
  # Base URL for web interface (used for "More Like This" links in notifications)
  base_url: "https://your-domain.example.com"
  # Flask secret key for session management
  # Generate with: python -c "import secrets; print(secrets.token_hex(32))"
  flask_secret_key: "generate_with_python_secrets.token_hex(32)"
  # Default timezone for new users (IANA timezone name, e.g., "UTC", "America/New_York", "Asia/Seoul")
  default_timezone: "UTC"
  # Default date format for new users (using moment.js format tokens)
  # Examples: "MMM D, YYYY" -> "Jan 1, 2024"
  #           "YYYY-MM-DD" -> "2024-01-01"
  #           "DD/MM/YYYY" -> "01/01/2024"
  default_date_format: "MMM D, YYYY"

# OAuth configuration for web interface authentication
# Configure one or both providers as needed
oauth:
  # Google OAuth configuration
  google:
    client_id: "your_google_oauth_client_id.apps.googleusercontent.com"
    secret: "your_google_oauth_client_secret"

  # GitHub OAuth configuration
  github:
    client_id: "your_github_oauth_client_id"
    secret: "your_github_oauth_client_secret"

  # ORCID OAuth configuration (essential for academic users)
  orcid:
    client_id: "your_orcid_oauth_client_id"
    secret: "your_orcid_client_secret"
    sandbox: false  # Set to true for testing with sandbox.orcid.org

# Embedding API configuration
# Supports OpenAI-compatible APIs (OpenAI, Solar LLM, Google Vertex AI via Gemini, etc.)
embedding_api:
  api_key: "your_api_key"
  # Optional: custom API endpoint (defaults to https://api.openai.com/v1)
  api_url: "https://api.openai.com/v1"
  # Optional: model name (defaults to text-embedding-3-large)
  model: "text-embedding-3-large"
  # Embedding dimensions (common values: 256, 768, 1536, 3072)
  # Must match the output dimensions of your embedding model
  dimensions: 1536

# Summarization API configuration
# Used for generating article summaries
summarization_api:
  api_key: "your_openai_api_key"
  # Optional: custom API endpoint (defaults to https://api.openai.com/v1)
  api_url: "https://api.openai.com/v1"
  # Optional: model name for summarization
  model: "gpt-4o-mini"

# Scholarly database configuration
# Choose between Semantic Scholar and OpenAlex for enriching article metadata
scholarly_database:
  # Provider to use: "semantic_scholar" or "openalex"
  provider: "semantic_scholar"

  # Date tolerance for automatic article matching during update task (in days)
  # When the update task tries to match RSS articles with scholarly database entries,
  # it will only consider articles published within this many days of the RSS date.
  # This does NOT affect web interface search functionality.
  # Default: 60
  match_date_tolerance_days: 60

  # Semantic Scholar configuration (if provider is semantic_scholar)
  semantic_scholar:
    api_key: "your_semanticscholar_api_key"
    # Optional: custom API URL
    # api_url: "https://api.semanticscholar.org/graph/v1/paper"
    # Optional: throttle between requests in seconds (default: 1)
    # throttle: 1

  # OpenAlex configuration (if provider is openalex)
  openalex:
    # OpenAlex requires a VALID email address for polite access (no API key needed)
    # Note: test@example.com and similar fake emails will NOT work
    email: "your_real_email@domain.com"
    # Optional: custom API URL
    # api_url: "https://api.openalex.org"
    # Optional: throttle between requests in seconds (default: 0.1)
    # throttle: 0.1

# SMTP configuration for email notifications
# Used when channel endpoint URLs start with "mailto:"

# Option 1: Provider-based configuration (recommended for public services)
# Uncomment one of the following provider configurations:

# Gmail
smtp:
  provider: gmail
  username: "your-email@gmail.com"
  password: "your-app-password"  # Use app-specific password, not regular password

# Outlook.com/Hotmail (personal accounts only)
# smtp:
#   provider: outlook
#   username: "your-email@outlook.com"
#   password: "your-app-password"  # Requires 2FA enabled

# Option 2: Custom SMTP configuration (for university, corporate, or other providers)
#smtp:
#  provider: custom
#  host: "smtp.example.com"
#  port: 587
#  encryption: tls  # Options: tls, ssl, none
#  # Optional: Authentication credentials (comment out if not needed)
#  # username: "your_smtp_username"
#  # password: "your_smtp_password"
#  # Connection timeout in seconds
#  timeout: 30

# Email notification configuration
email:
  # Sender email address
  from_address: "papersorter@example.com"
  # Sender display name
  from_name: "PaperSorter Newsletter"
  # Email subject template (Python f-string format, can use {date} variable)
  subject_template: "Research Papers Digest - {date:%Y-%m-%d}"

# Storage configuration
storage:
  # Directory for storing AI-generated poster images
  ai_poster_dir: "./ai_posters"

# Note: Channel endpoints are configured per channel in the database
# Use the web interface or direct database access to configure channels
# The system auto-detects notification type based on the endpoint URL:
#   - mailto:user@example.com -> Email notifications (batched newsletter)
#   - https://hooks.slack.com/... -> Slack notifications (individual messages)
#   - https://discord.com/api/webhooks/... -> Discord notifications (individual embeds)
